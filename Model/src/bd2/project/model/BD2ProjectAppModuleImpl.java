package bd2.project.model;

import bd2.project.model.common.BD2ProjectAppModule;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.internal.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 18 14:30:06 EET 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BD2ProjectAppModuleImpl extends ApplicationModuleImpl implements BD2ProjectAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public BD2ProjectAppModuleImpl() {

    }

    public void doQueryResultReset() {
        ViewCriteria vc =
            this.getFlightsVO().getViewCriteria("FlightsVOCriteria");
        this.getFlightsVO().removeViewCriteria("FlightsVOCriteria");
        this.getFlightsVO().executeEmptyRowSet();
        this.getFlightsVO().applyViewCriteria(vc);
    }

    public String doLoginDB(String userName, String password) {
        CallableStatement st = null;
        String rezult = null;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " :1:=dologin(:2, :3); end;",
                                            0);
            st.registerOutParameter(1,
                                    OracleTypes.CHAR); // param de iesire; poate fi fol la proc
            st.setString(2, userName);
            st.setString(3, password);
            st.execute();
            rezult = st.getString(1); // iau val de iesire
            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String doReservationDB(String userName, String flightId) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " client.doreservation(:1, :2, :3); end;",
                                            0);
            st.registerOutParameter(3, OracleTypes.CHAR);
            st.setString(1, userName);
            st.setString(2, flightId);
            st.execute();
            rezult = st.getString(3);

            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String buyTicketDB(String reservation_id, String card_no, String username_prm) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " client.buy_ticket(:1, :2, :3, :4); end;",
                                            0);
            st.registerOutParameter(4, OracleTypes.CHAR);
            st.setString(1, reservation_id);
            st.setString(2, card_no);
            st.setString(3, username_prm);
            st.execute();
            rezult = st.getString(4);

            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String createNewAccountDB(String cnp_prm, String firstname_prm,
                                     String lastname_prm, String address_prm,
                                     String phone_prm, String email_prm,
                                     String username_prm, String passwd_prm) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " client.new_client(:1, :2, :3, :4, :5, :6, :7, :8, :9); end;",
                                            0);
            st.registerOutParameter(9, OracleTypes.CHAR);
            st.setString(1, cnp_prm);
            st.setString(2, firstname_prm);
            st.setString(3, lastname_prm);
            st.setString(4, address_prm);
            st.setString(5, phone_prm);
            st.setString(6, email_prm);
            st.setString(7, username_prm);
            st.setString(8, passwd_prm);
            st.execute();
            rezult = st.getString(9);

            st.close();
            ps.close();
            return rezult;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String newFlightDB(String src_prm, String dest_prm,
                              String departHour_prm, String departDay_prm,
                              String duration_prm, String noSeats_prm,
                              String price_prm, String airplane_id_prm) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " admin.new_flight(:1, :2, :3, :4, :5, :6, :7, :8, :9); end;",
                                            0);
            st.registerOutParameter(9, OracleTypes.CHAR);
            st.setString(1, src_prm);
            st.setString(2, dest_prm);
            st.setString(3, departHour_prm);
            st.setString(4, departDay_prm);
            st.setString(5, duration_prm);
            st.setString(6, noSeats_prm);
            st.setString(7, price_prm);
            st.setString(8, airplane_id_prm);
            st.execute();
            rezult = st.getString(9);

            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }


    public String newPlaneDB(String airplane_name_prm,
                             String airplane_code_prm, String seats_prm,
                             String airplane_length_prm,
                             String airplane_height_prm,
                             String airplane_weight_prm) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " admin.new_plane(:1, :2, :3, :4, :5, :6, :7); end;",
                                            0);
            st.registerOutParameter(7, OracleTypes.CHAR);
            st.setString(1, airplane_name_prm);
            st.setString(2, airplane_code_prm);
            st.setString(3, seats_prm);
            st.setString(4, airplane_length_prm);
            st.setString(5, airplane_height_prm);
            st.setString(6, airplane_weight_prm);
            st.execute();
            rezult = st.getString(7);

            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String addPilotDB(String cnp_prm, String firstname_prm,
                             String lastname_prm, String address_prm,
                             String phone_prm, String sal_prm, String rank_prm,
                             String hiredate_prm, String comm_prm) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " admin.new_pilot(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10); end;",
                                            0);
            st.registerOutParameter(10, OracleTypes.CHAR);
            st.setString(1, cnp_prm);
            st.setString(2, firstname_prm);
            st.setString(3, lastname_prm);
            st.setString(4, address_prm);
            st.setString(5, phone_prm);
            st.setString(6, sal_prm);
            st.setString(7, rank_prm);
            st.setString(8, hiredate_prm);
            st.setString(9, comm_prm);
            st.execute();
            rezult = st.getString(10);

            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String cancelFlightDB(String flightId) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
 getDBTransaction().createCallableStatement("begin" + " admin.cancel_flight(:1, :2); end;",
                                            0);
            st.registerOutParameter(2, OracleTypes.CHAR);
            st.setString(1, flightId);
            st.execute();
            rezult = st.getString(2);

            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String cancelRservationDB(String reservation_id_prm) {
        CallableStatement st = null;
        String rezult = null;
        Integer rez;
        Connection conn;
        PreparedStatement ps;
        try {
            ps = getDBTransaction().createPreparedStatement("commit", 1);
            conn = ps.getConnection();
            st =
        getDBTransaction().createCallableStatement("begin" + " client.cancel_reservation(:1, :2); end;",
                                            0);
            st.registerOutParameter(2, OracleTypes.CHAR);
            st.setString(1, reservation_id_prm);
            st.execute();
            rezult = st.getString(2);

            st.close();
            ps.close();
            return rezult.trim();
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Container's getter for ClientsVO.
     * @return ClientsVO
     */
    public ViewObjectImpl getClientsVO() {
        return (ViewObjectImpl)findViewObject("ClientsVO");
    }

    /**
     * Container's getter for FlightByID.
     * @return FlightByID
     */
    public ViewObjectImpl getFlightByID() {
        return (ViewObjectImpl)findViewObject("FlightByID");
    }

    /**
     * Container's getter for ReservationsVO.
     * @return ReservationsVO
     */
    public ViewObjectImpl getReservationsVO() {
        return (ViewObjectImpl)findViewObject("ReservationsVO");
    }

    /**
     * Container's getter for FlightsVO.
     * @return FlightsVO
     */
    public ViewObjectImpl getFlightsVO() {
        return (ViewObjectImpl)findViewObject("FlightsVO");
    }

    /**
     * Container's getter for PilotsVO.
     * @return PilotsVO
     */
    public ViewObjectImpl getPilotsVO() {
        return (ViewObjectImpl)findViewObject("PilotsVO");
    }

    /**
     * Container's getter for AirplanesVO.
     * @return AirplanesVO
     */
    public ViewObjectImpl getAirplanesVO() {
        return (ViewObjectImpl)findViewObject("AirplanesVO");
    }

    /**
     * Container's getter for TicketsReportByDateVO.
     * @return TicketsReportByDateVO
     */
    public ViewObjectImpl getTicketsReportByDateVO() {
        return (ViewObjectImpl)findViewObject("TicketsReportByDateVO");
    }

    /**
     * Container's getter for SalReportByRankVO.
     * @return SalReportByRankVO
     */
    public ViewObjectImpl getSalReportByRankVO() {
        return (ViewObjectImpl)findViewObject("SalReportByRankVO");
    }
}
